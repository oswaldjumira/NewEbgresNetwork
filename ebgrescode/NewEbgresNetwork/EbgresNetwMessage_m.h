//
// Generated file, do not edit! Created by opp_msgc 4.1 from EbgresNetwMessage.msg.
//

#ifndef _EBGRESNETWMESSAGE_M_H_
#define _EBGRESNETWMESSAGE_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0401
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include <NetwPkt_m.h>

#include <Coord.h>
// }}



/**
 * Class generated from <tt>EbgresNetwMessage.msg</tt> by opp_msgc.
 * <pre>
 * class SelectMessage
 * {
 *     int selectNodeAddress;
 *     Coord selectNodePos;
 * }
 * </pre>
 */
class SelectMessage : public ::cObject
{
  protected:
    int selectNodeAddress_var;
    ::Coord selectNodePos_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SelectMessage&);

  public:
    SelectMessage();
    SelectMessage(const SelectMessage& other);
    virtual ~SelectMessage();
    SelectMessage& operator=(const SelectMessage& other);
    virtual SelectMessage *dup() const {return new SelectMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getSelectNodeAddress() const;
    virtual void setSelectNodeAddress(int selectNodeAddress_var);
    virtual Coord& getSelectNodePos();
    virtual const Coord& getSelectNodePos() const {return const_cast<SelectMessage*>(this)->getSelectNodePos();}
    virtual void setSelectNodePos(const Coord& selectNodePos_var);
};

inline void doPacking(cCommBuffer *b, SelectMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, SelectMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>EbgresNetwMessage.msg</tt> by opp_msgc.
 * <pre>
 * class DataMessage
 * {
 *     Coord destinationPos;
 *     Coord sourcePos;
 *     
 *     Coord idealPos;
 *     double residualEnergySender;
 * }
 * </pre>
 */
class DataMessage : public ::cObject
{
  protected:
    ::Coord destinationPos_var;
    ::Coord sourcePos_var;
    ::Coord idealPos_var;
    double residualEnergySender_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DataMessage&);

  public:
    DataMessage();
    DataMessage(const DataMessage& other);
    virtual ~DataMessage();
    DataMessage& operator=(const DataMessage& other);
    virtual DataMessage *dup() const {return new DataMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual Coord& getDestinationPos();
    virtual const Coord& getDestinationPos() const {return const_cast<DataMessage*>(this)->getDestinationPos();}
    virtual void setDestinationPos(const Coord& destinationPos_var);
    virtual Coord& getSourcePos();
    virtual const Coord& getSourcePos() const {return const_cast<DataMessage*>(this)->getSourcePos();}
    virtual void setSourcePos(const Coord& sourcePos_var);
    virtual Coord& getIdealPos();
    virtual const Coord& getIdealPos() const {return const_cast<DataMessage*>(this)->getIdealPos();}
    virtual void setIdealPos(const Coord& idealPos_var);
    virtual double getResidualEnergySender() const;
    virtual void setResidualEnergySender(double residualEnergySender_var);
};

inline void doPacking(cCommBuffer *b, DataMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, DataMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>EbgresNetwMessage.msg</tt> by opp_msgc.
 * <pre>
 * class AckMessage
 * {
 *     int intermediateNodeAddress;
 *     Coord intermediatePos;
 *     double residualEnergySender;
 *     
 * }
 * </pre>
 */
class AckMessage : public ::cObject
{
  protected:
    int intermediateNodeAddress_var;
    ::Coord intermediatePos_var;
    double residualEnergySender_var;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AckMessage&);

  public:
    AckMessage();
    AckMessage(const AckMessage& other);
    virtual ~AckMessage();
    AckMessage& operator=(const AckMessage& other);
    virtual AckMessage *dup() const {return new AckMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getIntermediateNodeAddress() const;
    virtual void setIntermediateNodeAddress(int intermediateNodeAddress_var);
    virtual Coord& getIntermediatePos();
    virtual const Coord& getIntermediatePos() const {return const_cast<AckMessage*>(this)->getIntermediatePos();}
    virtual void setIntermediatePos(const Coord& intermediatePos_var);
    virtual double getResidualEnergySender() const;
    virtual void setResidualEnergySender(double residualEnergySender_var);
};

inline void doPacking(cCommBuffer *b, AckMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, AckMessage& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>EbgresNetwMessage.msg</tt> by opp_msgc.
 * <pre>
 * class AnalysisData
 * {
 *     int routeNodes[];
 * }
 * </pre>
 */
class AnalysisData : public ::cObject
{
  protected:
    int *routeNodes_var; // array ptr
    unsigned int routeNodes_arraysize;

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const AnalysisData&);

  public:
    AnalysisData();
    AnalysisData(const AnalysisData& other);
    virtual ~AnalysisData();
    AnalysisData& operator=(const AnalysisData& other);
    virtual AnalysisData *dup() const {return new AnalysisData(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual void setRouteNodesArraySize(unsigned int size);
    virtual unsigned int getRouteNodesArraySize() const;
    virtual int getRouteNodes(unsigned int k) const;
    virtual void setRouteNodes(unsigned int k, int routeNodes_var);
};

inline void doPacking(cCommBuffer *b, AnalysisData& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, AnalysisData& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>EbgresNetwMessage.msg</tt> by opp_msgc.
 * <pre>
 * packet EbgresNetwMessage extends NetwPkt
 * {
 *     
 *     
 *     
 *     
 *     
 *     
 *     
 *     int type;
 *     int nextHopAddr; 
 *     int receivedFromAddr; 
 *     
 *     int dataMessageId; 
 *     SelectMessage selectMessage[1];
 *     DataMessage dataMessage[1];
 *     AckMessage AckMessage[1];
 *     
 *     AnalysisData analysisData[1];
 * }
 * </pre>
 */
class EbgresNetwMessage : public ::NetwPkt
{
  protected:
    int type_var;
    int nextHopAddr_var;
    int receivedFromAddr_var;
    int dataMessageId_var;
    ::SelectMessage selectMessage_var[1];
    ::DataMessage dataMessage_var[1];
    ::AckMessage AckMessage_var[1];
    ::AnalysisData analysisData_var[1];

    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const EbgresNetwMessage&);

  public:
    EbgresNetwMessage(const char *name=NULL, int kind=0);
    EbgresNetwMessage(const EbgresNetwMessage& other);
    virtual ~EbgresNetwMessage();
    EbgresNetwMessage& operator=(const EbgresNetwMessage& other);
    virtual EbgresNetwMessage *dup() const {return new EbgresNetwMessage(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getType() const;
    virtual void setType(int type_var);
    virtual int getNextHopAddr() const;
    virtual void setNextHopAddr(int nextHopAddr_var);
    virtual int getReceivedFromAddr() const;
    virtual void setReceivedFromAddr(int receivedFromAddr_var);
    virtual int getDataMessageId() const;
    virtual void setDataMessageId(int dataMessageId_var);
    virtual unsigned int getSelectMessageArraySize() const;
    virtual SelectMessage& getSelectMessage(unsigned int k);
    virtual const SelectMessage& getSelectMessage(unsigned int k) const {return const_cast<EbgresNetwMessage*>(this)->getSelectMessage(k);}
    virtual void setSelectMessage(unsigned int k, const SelectMessage& selectMessage_var);
    virtual unsigned int getDataMessageArraySize() const;
    virtual DataMessage& getDataMessage(unsigned int k);
    virtual const DataMessage& getDataMessage(unsigned int k) const {return const_cast<EbgresNetwMessage*>(this)->getDataMessage(k);}
    virtual void setDataMessage(unsigned int k, const DataMessage& dataMessage_var);
    virtual unsigned int getAckMessageArraySize() const;
    virtual AckMessage& getAckMessage(unsigned int k);
    virtual const AckMessage& getAckMessage(unsigned int k) const {return const_cast<EbgresNetwMessage*>(this)->getAckMessage(k);}
    virtual void setAckMessage(unsigned int k, const AckMessage& AckMessage_var);
    virtual unsigned int getAnalysisDataArraySize() const;
    virtual AnalysisData& getAnalysisData(unsigned int k);
    virtual const AnalysisData& getAnalysisData(unsigned int k) const {return const_cast<EbgresNetwMessage*>(this)->getAnalysisData(k);}
    virtual void setAnalysisData(unsigned int k, const AnalysisData& analysisData_var);
};

inline void doPacking(cCommBuffer *b, EbgresNetwMessage& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, EbgresNetwMessage& obj) {obj.parsimUnpack(b);}


#endif // _EBGRESNETWMESSAGE_M_H_
